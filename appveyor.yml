# Based on the "trust" template v0.1.1
# https://github.com/japaric/trust/tree/v0.1.1

environment:

  # At the time this was added AppVeyor was having troubles with checking
  # revocation of SSL certificates of sites like static.rust-lang.org and what
  # we think is crates.io. The libcurl HTTP client by default checks for
  # revocation on Windows and according to a mailing list [1] this can be
  # disabled.
  #
  # The `CARGO_HTTP_CHECK_REVOKE` env var here tells cargo to disable SSL
  # revocation checking on Windows in libcurl. Note, though, that rustup, which
  # we're using to download Rust here, also uses libcurl as the default backend.
  # Unlike Cargo, however, rustup doesn't have a mechanism to disable revocation
  # checking. To get rustup working we set `RUSTUP_USE_HYPER` which forces it to
  # use the Hyper instead of libcurl backend. Both Hyper and libcurl use
  # schannel on Windows but it appears that Hyper configures it slightly
  # differently such that revocation checking isn't turned on by default.
  #
  # [1]: https://curl.haxx.se/mail/lib-2016-03/0202.html
  RUSTUP_USE_HYPER: 1
  CARGO_HTTP_CHECK_REVOKE: false

  global:
    RUST_VERSION: stable
    CRATE_NAME: livesplit-core

  matrix:
    # MinGW
    - TARGET: i686-pc-windows-gnu
    - TARGET: x86_64-pc-windows-gnu

    # MSVC
    - TARGET: i686-pc-windows-msvc
    - TARGET: x86_64-pc-windows-msvc

    # Testing other channels
    - TARGET: x86_64-pc-windows-gnu
      RUST_VERSION: beta
    - TARGET: x86_64-pc-windows-msvc
      RUST_VERSION: beta
    - TARGET: x86_64-pc-windows-gnu
      RUST_VERSION: nightly
    - TARGET: x86_64-pc-windows-msvc
      RUST_VERSION: nightly

matrix:
  allow_failures:
    - RUST_VERSION: nightly
    - RUST_VERSION: beta

install:
  - ps: >-
      choco install curl
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V

test_script:
  # we don't run the "test phase" when doing deploys
  - if [%APPVEYOR_REPO_TAG%]==[false] (
      cargo build -p livesplit-core-capi --target %TARGET% &&
      cargo build -p livesplit-core-capi --target %TARGET% --release &&
      cargo test -p livesplit-core --target %TARGET% &&
      cargo test -p livesplit-core --target %TARGET% --release
    )

before_deploy:
  - cargo rustc -p livesplit-core-capi --target %TARGET% --release
  - ps: ci\before_deploy.ps1

deploy:
  artifact: /.*\.zip/
  auth_token:
    secure: zZGfrpCR/0TmHcXPwar4hOx6pZeq3C9Wwf/g62pvf135tAwJIVpuZHJjB0sAAd2M
  description: ''
  on:
    RUST_VERSION: stable
    appveyor_repo_tag: true
  provider: GitHub

cache:
  - C:\Users\appveyor\.cargo\registry
  - target

# branches:
#   only:
#     # Release tags
#     - /^v\d+\.\d+\.\d+.*$/
#     - master

notifications:
  - provider: Email
    on_build_success: false

# disable automatic builds
build: false
